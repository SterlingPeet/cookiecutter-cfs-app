.. DO NOT EDIT THIS FILE DIRECTLY!!!  Edit the template in ci/templates/README.rst
.. and then regenerate this file by running the ci/bootstrap.py script.
..

=====================
Cookiecutter: cFS App
=====================

Cookiecutter_ template for a `cFS`_ app, to help with reducing the copy-pasta effect while creating new apps.
There are just enough pieces to remember to change/fix, that it is rather challenging to do without a template.
So here is a template to fill in all the major adjustments, so you can spend time developing an app instead of scratching your head over why you get weird errors.

.. contents:: Table of Contents

Features
--------

* Working app created by running the Cookiecutter_.
* Choice of various licenses.

Requirements
------------

Projects using this template have these minimal dependencies:

* Cookiecutter_ - just for creating the project

Usage and options
-----------------

This template is intended to make it easy to generate all the boilerplate required for a `cFS`_ app.

First navigate to the directory where you want to add your app.
The template is going to create the folder containing your app in the current directory (you should *not* try to create the folder ahead of the template).
Next, generate the app's boilerplate::

  cookiecutter gh:SterlingPeet/cookiecutter-cfs-app

There are a few fields listed at the bottom, preceeded with double underscores.
You will not be asked for these, they will be generated from other responses.
If you feel that you really need to adjust them, they can be set within the ``.cookiecutterrc`` that is generated by the template and re-run according to the instructions in that file.

You will be asked for these fields:

.. list-table::
    :header-rows: 1

    * - Template variable
      - Default
      - Description

{% for field, contents in variables_table.items() %}
    * - ``{{ field }}``
      - .. code:: python

            "{{ contents.default_value }}"

      - {{ contents.help }}

{% endfor %}

You should now have a basic app that can be compiled and run.

From here there are a few more details to complete within your mission code to compile and load the app in cFE/cFS.

1. If needed, Add HK [and possibly WakeUp] MID(s) to Scheduler app's table
2. Add Telemetry MIDs to Telemetry Output's table
3. Add Command MID to Command Ingestor's table
4. Update ``[mission]_defs/target.cmake`` to build the app [APPLIST variable]
5. Add the new app to ``[mission]_defs/cfe_es_startup.scr``

Now you should be able to build and run cFS with this app included!


Changelog
---------

See `CHANGELOG.rst <https://github.com/SterlingPeet/cookiecutter-cfs-app/tree/master/CHANGELOG.rst>`_.

.. _Cookiecutter: https://github.gatech.edu/audreyr/cookiecutter
.. _cFS: https://cfs.gsfc.nasa.gov
.. _slug: https://en.wikipedia.org/wiki/Clean_URL#Slug
